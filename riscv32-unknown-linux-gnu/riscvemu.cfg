/* VM configuration file */
{
	version: 1,
	machine: "riscv32",
	bios: "bbl32.bin",
	cmdline: "console=hvc0 root=/dev/vda rw",
	drive0: { file: "riscv32.img" },
	eth0: { driver: "user" },

	core_name: "default-riscv-core",        /* Name of the simulated RISC-V CPU */
	core_type: "incore",                    /* Core type: In-order (incore) or Out-of-order(oocore) */

	/** In-order core parameters **/
	num_cpu_stages: 5,                      /* Number of pipeline stages: 5, 6 */

	/** Out-of-order core parameters **/
	prf_int_size: 64,                      /* Number of integer physical registers */
	prf_fp_size: 64,                       /* Number of floating-point physical registers */
	iq_int_size: 16,                       /* Number of integer issue-queue entries */
	iq_fp_size: 16,                        /* Number of floating-point issue-queue entries */
	iq_mem_size: 16,                       /* Number of memory issue-queue entries */
	iq_int_issue_ports: 3,		       /* Number of issue ports on integer issue-queue */
	iq_fp_issue_ports: 2,		       /* Number of issue ports on floating-point issue-queue */
	iq_mem_issue_ports: 2,		       /* Number of issue ports on memory issue-queue */	
	prf_int_write_ports: 3,                /* Number owrite ports to integer PRF */ 
	prf_fp_write_ports: 2,                 /* Number of write ports to floating-point PRF */ 
	rob_size: 64,                          /* Number of ROB entries */
	rob_commit_ports:4,		       /* Number of ROB commit ports */
	lsq_size: 16,                          /* Number of LSQ entries */ 

	/** Tracing and Logging Parameters **/
	sim_stats_file: "simstats.txt",         /* Path to the file to save simulation stats */
	sim_trace_file: "simtrace.txt",         /* Path to the file to save commit trace, must compile MARSS-RISCV with CONFIG_SIM_TRACE CFLAG */

	/** Execution Unit Parameters **/
	num_alu_stages: 1,                      /* Number of stages for integer ALU unit */
	alu_stage_latency: "1",                 /* Latencies for all integer ALU stages, comma separated. */			

	num_mul_stages: 1,                      /* Number of stages for integer MUL unit */			
	mul_stage_latency: "1",                 /* Latencies for all integer MUL stages, comma separated. eg. "1,2,1" */

	num_div_stages: 1,                      /* Number of stages for integer DIV unit */
	div_stage_latency: "8",                 /* Latencies for all integer DIV stages, comma separated. eg. "1,2,1" */

	num_fpu_alu_stages: 1,                  /* Number of stages for floating point ALU unit */
	fpu_alu_stage_latency: "1",             /* Latencies for all floating point ALU stages, comma separated. eg. "1,2,1" */

	num_fpu_fma_stages: 1,                  /* Number of stages for floating point fused multiply add unit */
	fpu_fma_stage_latency: "4",             /* Latencies for all floating point fused multiply add stages, comma separated. eg. "1,2,1" */

	/** BPU Parameters **/
	enable_bpu: "false",                     /* Enable branch prediction unit: true, false */
	btb_size: 256,                          /* Number of entries in BTB, must be power of 2 */
	btb_ways: 1,                            /* Number of BTB ways */
	btb_eviction_policy: "lru",             /* Eviction policy for BTB: lru, random */
	bpu_type: "adaptive",                   /* Type of predictor: bimodal, adaptive */
	bpu_ght_size: 1,                        /* Number of entries in Global history table, must be power of 2 */
	bpu_pht_size: 1,                        /* Number of entries in Pattern history table, must be power of 2 */
	bpu_history_bits: 2,                    /* Number of bits in history register */
	bpu_aliasing_func_type: "xor",          /* Aliasing function for adaptive predictor: and, xor, none
                                                   This can be used to construct Gshare(xor) and Gselect(and) predictors
                                                   when bpu_ght_size and bpu_pht_size are set to 1 */

	/** DRAM Parameters **/
	tlb_size: 32,                           /* Number of entries in instruction TLB, load TLB and store TLB */
	memory_size: 1024,                      /* Size of DRAM in MB */
	dram_burst_size: 32,                    /* DRAM burst size in bytes (Cache line size if caches are enabled) */
	mem_bus_access_rtt_latency: 4,		/* CPU cycles required to drive address and data on memory bus(round-trip time) */	
	row_read_latency: 3,			/* CPU cycles required to read a DRAM row into the row buffer */
	row_write_latency: 3,			/* CPU cycles required to write contents of row buffer into the respective DRAM row */
	row_buffer_read_latency: 1,		/* CPU cycles required to read data from row buffer */	

	/** Cache Parameters **/
	enable_l1_caches: "true",               /* Enable L1 caches: true, false */

	icache: {
		size: 16,                       /* Size of icache in KB */
		ways: 4,                        /* Number of ways in icache */
		probe_latency: 2,               /* Probe latency for icache in CPU cycles */
		eviction: "lru",             /* Eviction policy for icache: lru, random */
	},

	dcache: {
		size: 16,                       /* Size of dcache in KB */
		ways: 4,                        /* Number of ways in dcache */
		probe_latency: 2,               /* Probe latency for dcache in CPU cycles */
		eviction: "lru",             /* Eviction policy for dcache: lru, random */
	},

	enable_l2_cache: "true",               /* Enable l2_shared_cache: true, false */

	l2_shared_cache: {
		size: 512,                      /* Size of l2_shared_cache in KB */
		ways: 8,                        /* Number of ways in l2_shared_cache */
		probe_latency: 3,               /* Probe latency for l2_shared_cache in CPU cycles */
		eviction: "lru",             /* Eviction policy for l2_shared_cache: lru, random */
	},

	cache_allocate_on_write_miss: "true",   /* Allocate entry in cache on write miss: true, false  */
	cache_write_policy: "writeback",        /* Cache write policy: writeback, writethrough */
	words_per_cache_line: 8,                /* Number of words in each cache line
	                                           (used to determine cache-line-size = words_per_cache_line * 'XLEN' bits) */
}
